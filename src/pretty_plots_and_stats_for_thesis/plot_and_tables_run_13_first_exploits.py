from pathlib import Path

import pandas as pd

from src.constants import MODEL_RESPONSE, REWARD, SIMILARITY, TARGET_LABEL_PROB, TrainMode
from src.pretty_plots_and_stats_for_thesis.thesis_utils import (
    _get_all_generations_dfs_for_experiment,
    plot_ratio_of_generations_containing_word_across_epochs,
    plot_train_and_eval_metrics_together,
    reformat_examples,
)


def _plot_stuff(
    train_dfs: list[pd.DataFrame], eval_dfs: list[pd.DataFrame], plots_path: Path
) -> None:
    metrics = [REWARD, TARGET_LABEL_PROB, SIMILARITY]
    y_labels = ["Reward", "Fooling", "Semsim"]
    plot_titles = [
        "Rewards in the training after adding the semsim heuristic",
        "Fooling in the training after adding the semsim heuristic",
        "Semsim in the training after adding the semsim heuristic",
    ]

    for metric, y_label, plot_title in zip(metrics, y_labels, plot_titles):
        plot_train_and_eval_metrics_together(
            train_dfs=train_dfs,
            eval_dfs=eval_dfs,
            metric_name=metric,
            save_path=plots_path / f"{metric}.png",
            y_label=y_label,
            plot_title=plot_title,
            scatter_eval_values=False,
        )


def _get_coma_examples(eval_df: pd.DataFrame) -> pd.DataFrame:
    manual_comma_examples = (
        eval_df[
            eval_df[MODEL_RESPONSE].str.contains("crackerjack")
            | eval_df[MODEL_RESPONSE].str.contains("powerful")
            | eval_df[MODEL_RESPONSE].str.contains("when it hits its mark, it's brilliant")
        ]
        .groupby("idx")
        .sample(n=1, random_state=0)
    )
    manual_comma_examples["Exploit"] = ["Commas", "Commas, punctuation", "Commas"]
    return manual_comma_examples


def _get_uncertainty_examples(eval_df: pd.DataFrame) -> pd.DataFrame:
    manual_uncertainty_examples = (
        eval_df[
            eval_df[MODEL_RESPONSE].str.contains("seems extremely well-honed.")
            | eval_df[MODEL_RESPONSE].str.contains("seems to be impossible to look away.")
            | eval_df[MODEL_RESPONSE].str.contains("piccoli seems relatively affecting,")
            | eval_df[MODEL_RESPONSE].str.contains("thornberrys movie appear to be")
            | eval_df[MODEL_RESPONSE].str.contains("Nolan appears hungry")
        ]
        .groupby("idx")
        .sample(n=1, random_state=0)
    )
    manual_uncertainty_examples["Exploit"] = [
        "Uncertainty",
        "Uncertainty",
        "Uncertainty, ungrammatical",
        "Uncertainty",
        "Uncertainty, punctuation",
    ]
    return manual_uncertainty_examples


def _get_albeit_examples(eval_df: pd.DataFrame) -> pd.DataFrame:
    manual_albeit_examples = (
        eval_df[
            eval_df[MODEL_RESPONSE].str.contains("wry, albeit somewhat dark, humor")
            | eval_df[MODEL_RESPONSE].str.contains("amusing, albeit somewhat violent, ride.")
            | eval_df[MODEL_RESPONSE].str.contains("takes, albeit relatively fresh,")
            | eval_df[MODEL_RESPONSE].str.contains(
                "emotional, albeit ultimately more satisfying, than the"
            )
            | eval_df[MODEL_RESPONSE].str.contains("subtle, albeit well-crafted")
        ]
        .groupby("idx")
        .sample(n=1, random_state=0)
    )
    manual_albeit_examples["Exploit"] = [
        '"albeit"',
        '"albeit"',
        '"albeit somewhat", ungrammatical',
        '"albeit somewhat"',
        '"albeit"',
    ]
    return manual_albeit_examples


def _save_manual_examples(eval_df: pd.DataFrame, tables_save_dir: Path) -> None:
    manual_comma_examples = _get_coma_examples(eval_df)
    manual_uncertainty_examples = _get_uncertainty_examples(eval_df)
    manual_albeit_examples = _get_albeit_examples(eval_df)

    all_manual_examples = pd.concat(
        [manual_comma_examples, manual_uncertainty_examples, manual_albeit_examples],
        axis=0,
        ignore_index=True,
    )
    all_manual_examples = reformat_examples(all_manual_examples)
    all_manual_examples.to_csv(tables_save_dir / "manual_examples.csv", index=False)


def _save_random_examples(eval_df: pd.DataFrame, tables_save_dir: Path) -> None:
    random_examples = eval_df.sample(n=12, random_state=0)
    random_examples = reformat_examples(random_examples)
    random_examples.to_csv(tables_save_dir / "random_examples.csv", index=False)


def main() -> None:
    run_paths = [
        Path("runs/attacker/run_12"),
        Path("runs/attacker/run_13"),
    ]
    plots_path = Path("plots/run_13_first_exploits")
    plots_path.mkdir(exist_ok=True, parents=True)
    tables_save_dir = Path("tables_for_thesis/run_13_first_exploits")
    tables_save_dir.mkdir(exist_ok=True, parents=True)

    train_dfs = _get_all_generations_dfs_for_experiment(run_paths, TrainMode.train)
    eval_dfs = _get_all_generations_dfs_for_experiment(run_paths, TrainMode.eval)

    _plot_stuff(train_dfs, eval_dfs, plots_path)
    _save_manual_examples(eval_dfs[-1], tables_save_dir)
    _save_random_examples(eval_dfs[-1], tables_save_dir)

    plot_ratio_of_generations_containing_word_across_epochs("albeit", eval_dfs, plots_path)


if __name__ == "__main__":
    main()
